name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 1) SonarQube 스캔 실행
      - name: SonarQube Scan
        id: scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ github.event.repository.name }}

      # 2) report-task.txt 에서 ceTaskId 추출
      - name: Extract ceTaskId
        id: extract-task
        run: |
          TASK_FILE=".scannerwork/report-task.txt"
          if [ ! -f "$TASK_FILE" ]; then
            echo "ERROR: $TASK_FILE not found!"
            exit 1
          fi

          TASK_ID=$(grep "ceTaskId" $TASK_FILE | cut -d'=' -f2)
          if [ -z "$TASK_ID" ]; then
            echo "ERROR: Could not extract ceTaskId from $TASK_FILE"
            exit 1
          fi

          echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV
          echo "Extracted ceTaskId: $TASK_ID"

      # 3) Task API 로 분석 완료 대기
      - name: Wait for SonarQube Analysis
        run: |
          for i in {1..30}; do
            STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "${{ secrets.SONAR_HOST_URL }}/api/ce/task?id=${TASK_ID}" \
              | jq -r '.task.status')

            echo "Current status: $STATUS"
            if [ "$STATUS" = "SUCCESS" ]; then
              echo "Analysis completed successfully."
              exit 0
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Analysis failed."
              exit 1
            fi
            sleep 10
          done
          echo "Timeout waiting for SonarQube analysis."
          exit 1

      # 4) SonarQube 이슈 JSON 가져오기
      - name: Fetch SonarQube Issues
        run: |
          PROJECT_KEY="${{ github.event.repository.name }}"
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=${PROJECT_KEY}" \
            | jq '.' > sonar_issues.json
          echo "Result saved to sonar_issues.json"

      # 5) Slack 으로 JSON 파일 업로드 (files.uploadV2 3단계)
      - name: Upload SonarQube Issues to Slack
        run: |
          FILE="sonar_issues.json"
          FILESIZE=$(stat -c%s "$FILE")

          echo "Step1: 요청 upload_url..."
          JSON_PAYLOAD=$(jq -n --arg fn "$FILE" --argjson len $FILESIZE '{filename:$fn, length:$len}')
          echo "Request JSON: $JSON_PAYLOAD"

          RESPONSE=$(curl -s -X POST https://slack.com/api/files.getUploadURLExternal \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          echo "UploadURL Response: $RESPONSE"
          UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.upload_url')
          FILE_ID=$(echo "$RESPONSE" | jq -r '.file_id')

          if [ "$UPLOAD_URL" = "null" ] || [ -z "$UPLOAD_URL" ]; then
            echo "Failed to get upload_url"
            exit 1
          fi

          echo "Step2: 파일 업로드..."
          curl -s -X POST -F file=@$FILE "$UPLOAD_URL"

          echo "Step3: 파일 채널에 공유..."
          COMPLETE_PAYLOAD=$(jq -n \
            --arg fid "$FILE_ID" \
            --arg cid "${{ secrets.SLACK_CHANNEL_ID }}" \
            --arg comment "SonarQube Analysis result for project: ${{ github.event.repository.name }}" \
            '{files:[{id:$fid}], channel_id:$cid, initial_comment:$comment}')

          curl -s -X POST https://slack.com/api/files.completeUploadExternal \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$COMPLETE_PAYLOAD"

