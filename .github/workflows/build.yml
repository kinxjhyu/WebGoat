name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 1) SonarQube 스캔 실행
      - name: SonarQube Scan
        id: scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ github.event.repository.name }}

      # 2) ceTaskId 추출
      - name: Extract ceTaskId
        id: extract-task
        run: |
          # 스캐너 로그에서 ceTaskId 추출
          TASK_ID=$(grep -o "id=[a-f0-9-]\+" $GITHUB_STEP_SUMMARY | head -1 | cut -d'=' -f2)
          
          if [ -z "$TASK_ID" ]; then
            echo "ERROR: Could not extract ceTaskId from scanner output"
            exit 1
          fi

          echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV
          echo "Extracted ceTaskId: $TASK_ID"

      # 3) taskId 로 분석 완료 대기
      - name: Wait for SonarQube Analysis
        run: |
          for i in {1..30}; do
            STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "${{ secrets.SONAR_HOST_URL }}/api/ce/task?id=${TASK_ID}" \
              | jq -r '.task.status')

            echo "Current status: $STATUS"
            if [ "$STATUS" = "SUCCESS" ]; then
              echo "Analysis completed successfully."
              exit 0
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Analysis failed."
              exit 1
            fi
            sleep 10
          done
          echo "Timeout waiting for SonarQube analysis."
          exit 1

      # 4) SonarQube 이슈 JSON 가져오기
      - name: Fetch SonarQube Issues
        run: |
          PROJECT_KEY="${{ github.event.repository.name }}"
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=${PROJECT_KEY}" \
            | jq '.' > sonar_issues.json
          echo "Result saved to sonar_issues.json"

      # 5) Slack 전송
      - name: Send SonarQube Result to Slack
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "$(jq -Rs '{text: .}' sonar_issues.json)" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

