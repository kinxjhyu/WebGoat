name: Build

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Source code
        run: ls -R

      # 1) SonarQube Ïä§Ï∫î Ïã§Ìñâ
      - name: SonarQube Scan
        id: scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ github.event.repository.name }}

      # 2) SonarQube Ïù¥Ïäà JSON Í∞ÄÏ†∏Ïò§Í∏∞
      - name: Fetch SonarQube Issues
        run: |
          PROJECT_KEY="${{ github.event.repository.name }}"
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=${PROJECT_KEY}&ps=500" \
            | jq '.' > sonar_issues.json
          echo "Result saved to sonar_issues.json"

      # 3) jq Î°ú OPEN ÏÉÅÌÉú Ïù¥Ïäà ÏöîÏïΩ Ï∂îÏ∂ú
      - name: Extract OPEN issues summary
        run: |
          jq -r '.issues[] | select(.status=="OPEN") | "line: \(.line // "-")\tseverity: \(.severity)\tcode: \(.component)\tmessage: \(.message)"' sonar_issues.json > sonar_issues_summary.txt
          echo "===== Extracted summary ====="
          cat sonar_issues_summary.txt || echo "(empty)"
          echo "============================="

      # 4) ChatGPT API Ìò∏Ï∂ú + ÏùëÎãµ ÌååÏã± (ÌïúÍµ≠Ïñ¥ ÏöîÏ≤≠)
      - name: Ask ChatGPT for explanation
        id: chatgpt
        run: |
          ISSUES=$(cat sonar_issues_summary.txt | jq -Rs .)
          PROMPT=$(jq -n --arg issues "$ISSUES" '{"role":"user","content":"Îã§ÏùåÏùÄ SonarQube Ï†êÍ≤Ä Í≤∞Í≥ºÏûÖÎãàÎã§. ÌïúÍµ≠Ïñ¥Î°ú ÏßßÍ≥† Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï¥Ï§ò.\n\n\($issues)"}')

          RAW_RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "{
              \"model\": \"gpt-5\",
              \"messages\": [$PROMPT],
              \"max_completion_tokens\": 1000
            }")

          echo "$RAW_RESPONSE" > raw_chatgpt_response.json

          RESPONSE=$(jq -r '.choices[0].message.content' raw_chatgpt_response.json)
          if [ -z "$RESPONSE" ] || [ "$RESPONSE" = "null" ]; then
            RESPONSE="‚ö†Ô∏è ChatGPT ÏÑ§Î™ÖÏùÑ ÏÉùÏÑ±ÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§."
          fi
          echo "$RESPONSE" > chatgpt_response.txt

      # 5) Slack Ï†ÑÏÜ° (SonarQube Í≤∞Í≥º + ChatGPT ÏÑ§Î™Ö)
      - name: Send Combined Result to Slack
        run: |
          echo "===== SonarQube Summary ====="
          cat sonar_issues_summary.txt || echo "(empty)"
          echo "============================="
          echo "===== ChatGPT Response ====="
          cat chatgpt_response.txt || echo "(empty)"
          echo "============================="

          SQ_SUMMARY=$(jq -Rs . sonar_issues_summary.txt)
          GPT_RESPONSE=$(jq -Rs . chatgpt_response.txt)

          PAYLOAD=$(jq -n \
            --arg summary "```$(cat sonar_issues_summary.txt)```" \
            --arg gpt "$(cat chatgpt_response.txt)" \
            '{
              blocks: [
                {type: "section", text: {type: "mrkdwn", text: "*üìã SonarQube Ï†êÍ≤Ä Í≤∞Í≥º (OPEN ÏÉÅÌÉú Ïù¥Ïäà)*\n\($summary)"}},
                {type: "section", text: {type: "mrkdwn", text: "*ü§ñ ChatGPT ÏÑ§Î™Ö*\n\($gpt)"}}
              ]
            }')

          echo "===== Slack Payload ====="
          echo "$PAYLOAD"
          echo "========================="

          curl -X POST -H 'Content-type: application/json' \
               --data "$PAYLOAD" \
               ${{ secrets.SLACK_WEBHOOK_URL }}

