name: Build

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 1) SonarQube 스캔 실행
      - name: SonarQube Scan
        id: scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ github.event.repository.name }}

      # 2) SonarQube 이슈 JSON 가져오기
      - name: Fetch SonarQube Issues
        run: |
          PROJECT_KEY="${{ github.event.repository.name }}"
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=${PROJECT_KEY}&ps=500" \
            | jq '.' > sonar_issues.json
          echo "Result saved to sonar_issues.json"

      # 3) jq 로 OPEN 상태 이슈 요약 추출
      - name: Extract OPEN issues summary
        run: |
          jq -r '.issues[] | select(.status=="OPEN") | "line: \(.line // "-")\tseverity: \(.severity)\tcode: \(.component)\tmessage: \(.message)"' sonar_issues.json > sonar_issues_summary.txt
          echo "===== Extracted summary ====="
          cat sonar_issues_summary.txt || echo "(empty)"
          echo "============================="

      # 4) ChatGPT API 호출 + 응답 파싱
      - name: Ask ChatGPT for explanation
        id: chatgpt
        run: |
          # SonarQube 이슈 요약을 JSON-safe 문자열로 변환
          PROMPT=$(cat sonar_issues_summary.txt | jq -Rs .)

          echo "===== Prompt to ChatGPT ====="
          echo "$PROMPT"
          echo "============================="

          RAW_RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "{
              \"model\": \"gpt-5\",
              \"messages\": [
                {\"role\": \"user\", \"content\": $PROMPT}
              ],
              \"max_tokens\": 500
            }")

          echo "$RAW_RESPONSE" > raw_chatgpt_response.json

          echo "===== Raw ChatGPT response ====="
          cat raw_chatgpt_response.json
          echo "================================"

          RESPONSE=$(jq -r '.choices[0].message.content' raw_chatgpt_response.json)
          echo "===== Parsed ChatGPT response ====="
          echo "$RESPONSE"
          echo "==================================="
          echo "$RESPONSE" > chatgpt_response.txt

      # 5) Slack 전송 (ChatGPT 응답 전달)
      - name: Send ChatGPT Response to Slack
        run: |
          echo "===== ChatGPT Response file ====="
          cat chatgpt_response.txt || echo "(empty)"
          echo "================================="

          MSG=$(cat chatgpt_response.txt | jq -Rs .)

          echo "===== Slack payload ====="
          echo "{\"text\": $MSG}"
          echo "========================="

          curl -X POST -H 'Content-type: application/json' \
               --data "{\"text\": $MSG}" \
               ${{ secrets.SLACK_WEBHOOK_URL }}

               #
